version: '3.8'

services:
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - go-network

  postgresdb:
    image: postgres:alpine
    container_name: postgresdb
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      timeout: 20s
      retries: 10
    ports:
      - ${DB_PORT}:5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./src/database/init:/docker-entrypoint-initdb.d
    networks:
      - go-network
  
  go-app:
    build: .
    image: go-app
    container_name: go-app
    ports:
      - ${APP_PORT}:3000
    depends_on:
      postgresdb:
        condition: service_healthy
    volumes:
      - .:/usr/src/go-app
    restart: on-failure
    env_file:
      - .env
    networks:
      - go-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
    networks:
      - go-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3030:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD}
      - GF_PLUGINS_ENABLE=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - go-network

volumes:  
  dbdata:
  prom_data:

networks:
  go-network:
    driver: bridge